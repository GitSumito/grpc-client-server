// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServicesClient is the client API for FileServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServicesClient interface {
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesRespnse, error)
}

type fileServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServicesClient(cc grpc.ClientConnInterface) FileServicesClient {
	return &fileServicesClient{cc}
}

func (c *fileServicesClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesRespnse, error) {
	out := new(ListFilesRespnse)
	err := c.cc.Invoke(ctx, "/file.FileServices/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServicesServer is the server API for FileServices service.
// All implementations must embed UnimplementedFileServicesServer
// for forward compatibility
type FileServicesServer interface {
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesRespnse, error)
	mustEmbedUnimplementedFileServicesServer()
}

// UnimplementedFileServicesServer must be embedded to have forward compatible implementations.
type UnimplementedFileServicesServer struct {
}

func (UnimplementedFileServicesServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesRespnse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileServicesServer) mustEmbedUnimplementedFileServicesServer() {}

// UnsafeFileServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServicesServer will
// result in compilation errors.
type UnsafeFileServicesServer interface {
	mustEmbedUnimplementedFileServicesServer()
}

func RegisterFileServicesServer(s grpc.ServiceRegistrar, srv FileServicesServer) {
	s.RegisterService(&FileServices_ServiceDesc, srv)
}

func _FileServices_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServicesServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileServices/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServicesServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServices_ServiceDesc is the grpc.ServiceDesc for FileServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileServices",
	HandlerType: (*FileServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _FileServices_ListFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/file.proto",
}
